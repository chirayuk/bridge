#!/usr/bin/env dart
// vim: set filetype=dart: -*- mode: dart; -*

import 'dart:io';
import 'dart:async';
import '../lib/src/utils.dart';
import '../lib/src/parse.dart';
import '../lib/src/bridge_visitor.dart';

void print_usage_and_exit() {
  print(dedent('''
      Usage: bridge_test [input]

      Prints the Javascript equivalent to the Dart code.

      If no file is passed in, then reads from stdin.'''));
  exit(2);
}

void main() {
  var fnames = new Options().arguments;
  if (fnames.length != 1) {
     print_usage_and_exit();
  }

  // Remove the .dart suffix if one was specified. (Convenient if you
  // used shell autocompletion.)
  var prefix = fnames[0];
  if (prefix.endsWith(".dart")) {
    prefix = prefix.slice(0, prefix.lastIndexOf(".dart"));
  }

  var dartStream = new File("$prefix.dart").openRead();
  var jsStream = new File("$prefix.js").openRead();

  readFullStream(dartStream).then((dartText) {
    readFullStream(jsStream).then((jsText) {
      String genJs = stringBridge(dartText, (x) => new BridgeVisitor.root());
      print(genJs);
      if (jsText.trim() != genJs.trim()) {
         print("Not equal.  Bad news!\n");
         print(jsText);
      }
    });
  });
}
